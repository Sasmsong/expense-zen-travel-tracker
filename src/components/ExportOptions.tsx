
import { FileText, Download, Mail } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Sheet, SheetContent, SheetHeader, SheetTitle } from "@/components/ui/sheet";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Expense } from "@/types/Expense";

interface ExportOptionsProps {
  isOpen: boolean;
  onClose: () => void;
  expenses: Expense[];
  categoryTotals: { [key: string]: number };
  tripName: string;
}

export const ExportOptions = ({ isOpen, onClose, expenses, categoryTotals, tripName }: ExportOptionsProps) => {
  const totalAmount = expenses.reduce((sum, expense) => sum + expense.amount, 0);

  const safeCSVField = (val: string) => {
    const v = (val ?? '').toString();
    const escaped = v.replace(/"/g, '""');
    const needsPrefix = /^[=+\-@]/.test(escaped.trimStart());
    const protectedVal = needsPrefix ? `'` + escaped : escaped;
    return `"${protectedVal}"`;
  };

  const generateAccountingCSV = () => {
    const sortedExpenses = [...expenses].sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());
    
    // Headers for accounting format
    const headers = [
      'Trip Name',
      'Date',
      'Merchant/Vendor',
      'Category',
      'Amount',
      'Currency',
      'Original Amount',
      'Original Currency',
      'Exchange Rate',
      'Tags',
      'Notes',
      'Receipt Available'
    ];

    // Data rows
    const dataRows = sortedExpenses.map(expense => [
      safeCSVField(tripName),
      expense.date,
      safeCSVField(expense.merchant),
      safeCSVField(expense.category),
      expense.amount.toFixed(2),
      expense.currency || 'USD',
      expense.originalAmount ? expense.originalAmount.toFixed(2) : '',
      expense.originalCurrency || '',
      expense.exchangeRate ? expense.exchangeRate.toFixed(4) : '',
      safeCSVField(expense.tags?.join(', ') || ''),
      safeCSVField(expense.notes || ''),
      expense.photo ? 'Yes' : 'No'
    ]);

    // Summary rows
    const summaryRows = [
      [], // Empty row
      ['EXPENSE SUMMARY'],
      ['Total Expenses', '', '', '', totalAmount.toFixed(2)],
      ['Number of Receipts', '', '', '', expenses.length.toString()],
      [], // Empty row
      ['CATEGORY BREAKDOWN'],
      ...Object.entries(categoryTotals)
        .sort(([,a], [,b]) => b - a)
        .map(([category, amount]) => [category, '', '', '', amount.toFixed(2)]),
      [], // Empty row
      ['Report Generated', new Date().toLocaleDateString()],
      ['Generated by', 'Travel Expense Tracker']
    ];

    // Combine all rows
    const csvContent = [
      headers.join(','),
      ...dataRows.map(row => row.join(',')),
      ...summaryRows.map(row => row.join(','))
    ].join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${tripName.replace(/\s+/g, '_')}_Accounting_Report.csv`;
    a.click();
    URL.revokeObjectURL(url);
  };

  const generateDetailedReport = () => {
    const sortedExpenses = [...expenses].sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());
    
    const sanitizeText = (val: string) => (val ?? '').toString().replace(/[<>]/g, '');

    const reportContent = `
TRAVEL EXPENSE REPORT
=====================
Trip: ${sanitizeText(tripName)}
Report Generated: ${new Date().toLocaleDateString()}

EXECUTIVE SUMMARY
-----------------
Total Amount: $${totalAmount.toFixed(2)}
Number of Receipts: ${expenses.length}
Trip Duration: ${sortedExpenses.length > 0 ? `${sortedExpenses[0].date} to ${sortedExpenses[sortedExpenses.length - 1].date}` : 'N/A'}

CATEGORY BREAKDOWN
------------------
${Object.entries(categoryTotals)
  .sort(([,a], [,b]) => b - a)
  .map(([category, amount]) => `${category.padEnd(20)} $${amount.toFixed(2).padStart(10)}`)
  .join('\n')}
${''.padEnd(20)} ${''.padEnd(11)}
${'TOTAL'.padEnd(20)} $${totalAmount.toFixed(2).padStart(10)}

DETAILED EXPENSE LOG
--------------------
${sortedExpenses
  .map(expense => {
    const tags = expense.tags?.length ? ` [${expense.tags.map(sanitizeText).join(', ')}]` : '';
    const currency = expense.originalCurrency && expense.originalAmount 
      ? ` (${expense.originalCurrency} ${expense.originalAmount.toFixed(2)} @ ${expense.exchangeRate?.toFixed(4)})`
      : '';
    const notes = expense.notes ? `\n    Notes: ${sanitizeText(expense.notes)}` : '';
    
    return `${expense.date} | ${sanitizeText(expense.merchant).padEnd(25)} | ${sanitizeText(expense.category).padEnd(15)} | $${expense.amount.toFixed(2).padStart(8)}${currency}${tags}${notes}`;
  })
  .join('\n')}

EXPENSE TAGS SUMMARY
--------------------
${Array.from(new Set(expenses.flatMap(e => e.tags || [])))
  .filter(tag => tag)
  .map(tag => {
    const taggedExpenses = expenses.filter(e => e.tags?.includes(tag));
    const tagTotal = taggedExpenses.reduce((sum, e) => sum + e.amount, 0);
    return `${sanitizeText(tag).padEnd(20)} ${taggedExpenses.length} expenses, $${tagTotal.toFixed(2)}`;
  })
  .join('\n')}

RECURRING EXPENSES
------------------
${expenses.filter(e => e.isRecurring)
  .map(e => `${sanitizeText(e.merchant).padEnd(25)} | ${sanitizeText(e.category).padEnd(15)} | $${e.amount.toFixed(2).padStart(8)}`)
  .join('\n') || 'No recurring expenses detected'}

CURRENCY CONVERSIONS
--------------------
${expenses.filter(e => e.originalCurrency && e.originalAmount)
  .map(e => `${e.date} | ${sanitizeText(e.merchant).padEnd(20)} | ${e.originalCurrency} ${e.originalAmount?.toFixed(2)} → ${e.currency || 'USD'} ${e.amount.toFixed(2)} (Rate: ${e.exchangeRate?.toFixed(4)})`)
  .join('\n') || 'No currency conversions'}

END OF REPORT
=============
    `;

    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${tripName.replace(/\s+/g, '_')}_Detailed_Report.txt`;
    a.click();
    URL.revokeObjectURL(url);
  };

  const shareByEmail = () => {
    const subject = encodeURIComponent(`${tripName} - Expense Report`);
    const body = encodeURIComponent(`
Hi,

Please find the expense report for ${tripName}:

SUMMARY:
• Total Amount: $${totalAmount.toFixed(2)}
• Number of Receipts: ${expenses.length}
• Categories: ${Object.keys(categoryTotals).length}

CATEGORY BREAKDOWN:
${Object.entries(categoryTotals)
  .sort(([,a], [,b]) => b - a)
  .map(([category, amount]) => `• ${category}: $${amount.toFixed(2)}`)
  .join('\n')}

I will send the detailed CSV file separately for your accounting records.

Best regards
    `);
    
    window.location.href = `mailto:?subject=${subject}&body=${body}`;
  };

  return (
    <Sheet open={isOpen} onOpenChange={onClose}>
      <SheetContent side="bottom" className="h-[70vh]">
        <SheetHeader>
          <SheetTitle>Export & Reports</SheetTitle>
        </SheetHeader>

        <div className="space-y-4 mt-6">
          {/* Summary Card */}
          <Card>
            <CardHeader>
              <CardTitle className="text-lg">Trip Summary</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-2">
                <div className="flex justify-between">
                  <span>Total Amount:</span>
                  <span className="font-bold">${totalAmount.toFixed(2)}</span>
                </div>
                <div className="flex justify-between">
                  <span>Receipts:</span>
                  <span className="font-bold">{expenses.length}</span>
                </div>
                <div className="text-sm text-gray-600 mt-3">
                  <div className="font-medium mb-1">Top Categories:</div>
                  {Object.entries(categoryTotals)
                    .sort(([,a], [,b]) => b - a)
                    .slice(0, 3)
                    .map(([category, amount]) => (
                      <div key={category} className="flex justify-between">
                        <span>{category}:</span>
                        <span>${amount.toFixed(2)}</span>
                      </div>
                    ))}
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Export Actions */}
          <div className="space-y-3">
            <Button 
              onClick={generateAccountingCSV}
              className="w-full bg-green-600 hover:bg-green-700"
            >
              <FileText className="w-4 h-4 mr-2" />
              Download Accounting CSV (with Totals)
            </Button>
            
            <Button 
              onClick={generateDetailedReport}
              variant="outline"
              className="w-full"
            >
              <Download className="w-4 h-4 mr-2" />
              Download Detailed Report
            </Button>
            
            <Button 
              onClick={shareByEmail}
              variant="outline"
              className="w-full"
            >
              <Mail className="w-4 h-4 mr-2" />
              Share Summary via Email
            </Button>
          </div>

          <Button variant="outline" onClick={onClose} className="w-full mt-4">
            Close
          </Button>
        </div>
      </SheetContent>
    </Sheet>
  );
};
